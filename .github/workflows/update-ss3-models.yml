name: update-user-example-models
on: 
  push
  release:
    types: [published]

jobs:
  update-user-example-models:
    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: install libcurl
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: setup R  
        uses: r-lib/actions/setup-r@v2
      
      - name: install remotes
        run: Rscript -e 'install.packages("remotes")'

      - name: install r4ss
        run: Rscript -e 'remotes::install_github("r4ss/r4ss")'
      
      - name: install SSutils
        run: Rscript -e 'remotes::install_github("r4ss/SSutils")'
        
      - name: Get the latest SS3 executable
        run:  wget -O ss https://github.com/nmfs-stock-synthesis/stock-synthesis/releases/latest/download/ss_linux
          
      - name: move ss to path
        run: |
          echo "ss" >> $GITHUB_PATH
     
      - name: run models
        run: |
          # functions to use ----

          #' Update the reference files for one model
          #' Updates the ss.par, ss_summary.sso, and warning.sso files
          #' @param new_mod_path where the model files of one model have been written
          #' @param ss_examples_folder subfolder containing the model files in the git repository.
          #' @returns TRUE if files were all successfully replaced, FALSE if they were not all successfully replaced.
          update_ref_files <- function(new_mod_path, ss_examples_folder = file.path(getwd(), "model_files")) {
            mod_name <- basename(new_mod_path)
            git_mod_path <- file.path(ss_examples_folder, mod_name)
            # list model files that need to be moved
            files_to_move <- c("ss.par", "ss_summary.sso", "warning.sso")
            # copy model files from new_mod_path folder to the git_mod_path folder,
            results_of_move <- lapply(files_to_move,
                                      function(x, new_mod_path, git_mod_path) {
            file.remove(file.path(git_mod_path, x))
            file.copy(from = file.path(new_mod_path, x),
                      to = file.path(git_mod_path, x), 
                      overwrite = FALSE) 
            #to make sure worked:
            worked <- file.exists(file.path(git_mod_path, x))
            }, new_mod_path = new_mod_path, git_mod_path = git_mod_path)
            if(all(unlist(results_of_move) == TRUE)) {
              files_replaced <- TRUE
            } else {
              files_replaced <- FALSE
            }
            files_replaced
          }

          # first part: update the reference files.
          # run models locally first
          r4ss::populate_multiple_folders(outerdir.old = "model_files", 
                                          outerdir.new = "new_model_files",
                                          exe.file = NULL, verbose = FALSE)
          new_mod_dirs <- list.dirs("new_model_files", recursive = FALSE)
          # use the parallel version to speed up model runs 
          SSutils::run_SS_models_parallel(dirvec = new_mod_dirs, 
                                          model = "ss", exe_in_path = TRUE, 
                                          parallel = TRUE)
          new_mod_runs_folder <- file.path("new_model_files")
          new_mod_path_list <- list.dirs(new_mod_runs_folder, recursive = FALSE,
                                        full.names = TRUE)
          run_results <- lapply(new_mod_path_list, update_ref_files)

          # check all have been replaced with the correct version of summary files
          # want to double check this before committing the files.
          git_mods <- list.dirs("models", recursive = FALSE, full.names = TRUE)
          first_line <- lapply(git_mods, function (x) {
            ss_sum <- readLines(file.path(x, "ss_summary.sso"))
            version <- grep(update_model_string , ss_sum, fixed = TRUE)
            if (!(1 %in% version)) {
              message(update_model_string, " not found on first line for ", x)
            }
            return(ss_sum[1])
          })
          # see all first lines for the files to verify the correct version of SS3 is being used.
          unlist(first_line)

          # second part: copy over new input files
          # copy the new input files back into the old ones to get new formatting.
          # note that using the ss_new files means that the some of the input values in the control file
          # may change a bit to be at the MLE estimates.
          r4ss::populate_multiple_folders(outerdir.old = "new_models", 
                                          outerdir.new = "models", overwrite = TRUE,
                                          exe.file = NULL, verbose = FALSE, 
                                          use_ss_new = TRUE)
          # manually, check that the changed files make sense and commit changes. Then, run clean up.

          # cleanup ----
          unlink("new_models", recursive = TRUE)
        shell: Rscript {0}


      - name: Create Pull Request 
        uses: peter-evans/create-pull-request@v3
        with:
          commit_message: Update model files to new ss exe
          branch: add-update-workflow-new
          title: 'Update model files to new ss exe'
